version: 2
jobs:
  prepare_release:
    docker:
      - image: elixir:1.9.4-alpine
        environment:
          MIX_ENV: prod
    working_directory: /banking
    steps:
      - checkout
      - run: apk add --update alpine-sdk
      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache: &deps_cache
          keys:
            - &deps_key v3-prod-deps-cache-{{ checksum "mix.lock" }}
      - restore_cache: &build_cache
          keys:
            - &build_key v3-prod-build-cache-{{ .Branch }}
      - run: mix do deps.get --only prod, deps.compile, compile
      - save_cache:
          key: *deps_key
          paths: deps
      - save_cache:
          key: *build_key
          paths: _build
      - run: mix release
      - save_cache: &release_cache
          key: v3-prod-compile-cache-{{ .Revision }}
          paths: /banking/_build/prod/rel

  publish_image:
    docker:
      - image: docker:18.06.0-ce
    working_directory: /banking
    steps:
      - checkout
      - restore_cache: *release_cache

      - run: ls
      - run: pwd
      - setup_remote_docker:
          version: 18.06.0-ce
      - run:
          name: Build and publish docker image
          command: |
            docker build --tag andrelip/banking:$CIRCLE_SHA1 --file DockerfileCI .
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
            docker push andrelip/banking:$CIRCLE_SHA1
      - run:
          name: Set and publish the image as latest if master
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then docker tag andrelip/banking:$CIRCLE_SHA1 andrelip/banking:latest; fi
            if [ "${CIRCLE_BRANCH}" == "master" ]; then docker push andrelip/banking:latest; fi

  test:
    docker:
      - image: circleci/elixir:1.9.4
        environment:
          MIX_ENV: test
      - image: circleci/postgres:10.1-alpine
        environment:
          PG_USER: postgres
          PG_PASSWORD: app_test
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          keys:
            - v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v3-mix-cache-{{ .Branch }}
            - v3-mix-cache
      - restore_cache:
          keys:
            - v3-build-cache-{{ .Branch }}
            - v3-build-cache
      - restore_cache:
          keys:
            - v3-dialyzer
      - run: mix do deps.get, deps.compile, compile --warnings-as-errors

      - run:
          name: Running Dialyzer
          command: MIX_ENV=dev mix dialyzer

      - save_cache:
          key: v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v3-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v3-mix-cache
          paths: "deps"
      - save_cache:
          key: v3-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v3-build-cache
          paths: "_build"
      - save_cache:
          key: v3-dialyzer
          paths: "priv/plts"

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run credo tests
          command: mix credo -a --strict --ignore todo

      - run: mix test

      - store_test_results:
          path: _build/test/lib/banking

      - run:
          name: check test coverage
          command: mix coveralls && mix coveralls.post -t $COVERALLS_REPO_TOKEN  -b ${CIRCLE_BRANCH} -m "`git log -1 --pretty=%B`" -n circleci -c "`git log -1 --pretty=format:'%an'` -sha `git rev-parse HEAD`"

workflows:
  version: 2
  test:
    jobs:
      - test
  build_and_publish:
    jobs:
      - prepare_release
      - publish_image:
          requires:
            - prepare_release
